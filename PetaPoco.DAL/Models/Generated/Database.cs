



















// This file was automatically generated by the PetaPoco T4 Template
// Do not make changes directly to this file - edit the template instead
// 
// The following connection settings were used to generate this file
// 
//     Connection String Name: `StackOverflow`
//     Provider:               `System.Data.SqlClient`
//     Connection String:      `Data Source=tron\sqlexpressonmbp;Initial Catalog=StackOverflow;Integrated Security=True`
//     Schema:                 ``
//     Include Views:          `False`



using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using PetaPoco;

namespace PetaPoco.DAL.Models
{

	public partial class StackOverflowDB : Database
	{
		public StackOverflowDB() 
			: base("StackOverflow")
		{
			CommonConstruct();
		}

		public StackOverflowDB(string connectionStringName) 
			: base(connectionStringName)
		{
			CommonConstruct();
		}
		
		partial void CommonConstruct();
		
		public interface IFactory
		{
			StackOverflowDB GetInstance();
		}
		
		public static IFactory Factory { get; set; }
        public static StackOverflowDB GetInstance()
        {
			if (_instance!=null)
				return _instance;
				
			if (Factory!=null)
				return Factory.GetInstance();
			else
				return new StackOverflowDB();
        }

		[ThreadStatic] static StackOverflowDB _instance;
		
		public override void OnBeginTransaction()
		{
			if (_instance==null)
				_instance=this;
		}
		
		public override void OnEndTransaction()
		{
			if (_instance==this)
				_instance=null;
		}
        

		public class Record<T> where T:new()
		{
			public static StackOverflowDB repo { get { return StackOverflowDB.GetInstance(); } }
			public bool IsNew() { return repo.IsNew(this); }
			public object Insert() { return repo.Insert(this); }

			public void Save() { repo.Save(this); }
			public int Update() { return repo.Update(this); }

			public int Update(IEnumerable<string> columns) { return repo.Update(this, columns); }
			public static int Update(string sql, params object[] args) { return repo.Update<T>(sql, args); }
			public static int Update(Sql sql) { return repo.Update<T>(sql); }
			public int Delete() { return repo.Delete(this); }
			public static int Delete(string sql, params object[] args) { return repo.Delete<T>(sql, args); }
			public static int Delete(Sql sql) { return repo.Delete<T>(sql); }
			public static int Delete(object primaryKey) { return repo.Delete<T>(primaryKey); }
			public static bool Exists(object primaryKey) { return repo.Exists<T>(primaryKey); }
			public static bool Exists(string sql, params object[] args) { return repo.Exists<T>(sql, args); }
			public static T SingleOrDefault(object primaryKey) { return repo.SingleOrDefault<T>(primaryKey); }
			public static T SingleOrDefault(string sql, params object[] args) { return repo.SingleOrDefault<T>(sql, args); }
			public static T SingleOrDefault(Sql sql) { return repo.SingleOrDefault<T>(sql); }
			public static T FirstOrDefault(string sql, params object[] args) { return repo.FirstOrDefault<T>(sql, args); }
			public static T FirstOrDefault(Sql sql) { return repo.FirstOrDefault<T>(sql); }
			public static T Single(object primaryKey) { return repo.Single<T>(primaryKey); }
			public static T Single(string sql, params object[] args) { return repo.Single<T>(sql, args); }
			public static T Single(Sql sql) { return repo.Single<T>(sql); }
			public static T First(string sql, params object[] args) { return repo.First<T>(sql, args); }
			public static T First(Sql sql) { return repo.First<T>(sql); }
			public static List<T> Fetch(string sql, params object[] args) { return repo.Fetch<T>(sql, args); }
			public static List<T> Fetch(Sql sql) { return repo.Fetch<T>(sql); }
			public static List<T> Fetch(long page, long itemsPerPage, string sql, params object[] args) { return repo.Fetch<T>(page, itemsPerPage, sql, args); }
			public static List<T> Fetch(long page, long itemsPerPage, Sql sql) { return repo.Fetch<T>(page, itemsPerPage, sql); }
			public static List<T> SkipTake(long skip, long take, string sql, params object[] args) { return repo.SkipTake<T>(skip, take, sql, args); }
			public static List<T> SkipTake(long skip, long take, Sql sql) { return repo.SkipTake<T>(skip, take, sql); }
			public static Page<T> Page(long page, long itemsPerPage, string sql, params object[] args) { return repo.Page<T>(page, itemsPerPage, sql, args); }
			public static Page<T> Page(long page, long itemsPerPage, Sql sql) { return repo.Page<T>(page, itemsPerPage, sql); }
			public static IEnumerable<T> Query(string sql, params object[] args) { return repo.Query<T>(sql, args); }
			public static IEnumerable<T> Query(Sql sql) { return repo.Query<T>(sql); }

		}

	}
	



    
	[TableName("Badges")]


	[PrimaryKey("Id")]



	[ExplicitColumns]
    public partial class Badge : StackOverflowDB.Record<Badge>  
    {



		[Column] public int Id { get; set; }





		[Column] public int? UserId { get; set; }





		[Column] public string Name { get; set; }





		[Column] public DateTime? CreationDate { get; set; }



	}

    
	[TableName("Comments")]


	[PrimaryKey("Id", autoIncrement=false)]

	[ExplicitColumns]
    public partial class Comment : StackOverflowDB.Record<Comment>  
    {



		[Column] public int Id { get; set; }





		[Column] public int? PostId { get; set; }





		[Column] public int? Score { get; set; }





		[Column] public string Text { get; set; }





		[Column] public DateTime? CreationDate { get; set; }





		[Column] public int? UserId { get; set; }



	}

    
	[TableName("Posts")]


	[PrimaryKey("Id")]



	[ExplicitColumns]
    public partial class Post : StackOverflowDB.Record<Post>  
    {



		[Column] public int Id { get; set; }





		[Column] public int? PostTypeId { get; set; }





		[Column] public int? AcceptedAnswerId { get; set; }





		[Column] public DateTime? CreationDate { get; set; }





		[Column] public int? Score { get; set; }





		[Column] public int? ViewCount { get; set; }





		[Column] public string Body { get; set; }





		[Column] public int? OwnerUserId { get; set; }





		[Column] public string OwnerDisplayName { get; set; }





		[Column] public int? LastEditorUserId { get; set; }





		[Column] public DateTime? LastEditDate { get; set; }





		[Column] public DateTime? LastActivityDate { get; set; }





		[Column] public string Title { get; set; }





		[Column] public string Tags { get; set; }





		[Column] public int? AnswerCount { get; set; }





		[Column] public int? CommentCount { get; set; }





		[Column] public int? FavoriteCount { get; set; }





		[Column] public DateTime? ClosedDate { get; set; }





		[Column] public int? ParentId { get; set; }





		[Column] public DateTime? CommunityOwnedDate { get; set; }



	}

    
	[TableName("Users")]


	[PrimaryKey("Id", autoIncrement=false)]

	[ExplicitColumns]
    public partial class User : StackOverflowDB.Record<User>  
    {



		[Column] public int Id { get; set; }





		[Column] public int? Reputation { get; set; }





		[Column] public DateTime? CreationDate { get; set; }





		[Column] public string DisplayName { get; set; }





		[Column] public DateTime? LastAccessDate { get; set; }





		[Column] public string WebsiteUrl { get; set; }





		[Column] public string Location { get; set; }





		[Column] public int? Age { get; set; }





		[Column] public string AboutMe { get; set; }





		[Column] public int? Views { get; set; }





		[Column] public int? UpVotes { get; set; }





		[Column] public int? DownVotes { get; set; }



	}

    
	[TableName("Votes")]


	[PrimaryKey("Id", autoIncrement=false)]

	[ExplicitColumns]
    public partial class Vote : StackOverflowDB.Record<Vote>  
    {



		[Column] public int Id { get; set; }





		[Column] public int? PostId { get; set; }





		[Column] public int? VoteTypeId { get; set; }





		[Column] public DateTime? CreationDate { get; set; }



	}

    
	[TableName("Tags")]


	[PrimaryKey("Id")]



	[ExplicitColumns]
    public partial class Tag : StackOverflowDB.Record<Tag>  
    {



		[Column] public int Id { get; set; }





		[Column] public string TagName { get; set; }



	}

    
	[TableName("PostTags")]


	[ExplicitColumns]
    public partial class PostTag : StackOverflowDB.Record<PostTag>  
    {



		[Column] public int? PostId { get; set; }





		[Column] public int? TagId { get; set; }



	}

    
	[TableName("VoteTypes")]


	[PrimaryKey("Id", autoIncrement=false)]

	[ExplicitColumns]
    public partial class VoteType : StackOverflowDB.Record<VoteType>  
    {



		[Column] public int Id { get; set; }





		[Column] public string Name { get; set; }



	}

    
	[TableName("PostTypes")]


	[PrimaryKey("Id", autoIncrement=false)]

	[ExplicitColumns]
    public partial class PostType : StackOverflowDB.Record<PostType>  
    {



		[Column] public int Id { get; set; }





		[Column] public string Type { get; set; }



	}

    
	[TableName("PostsTags")]


	[ExplicitColumns]
    public partial class PostsTag : StackOverflowDB.Record<PostsTag>  
    {



		[Column] public int PostId { get; set; }





		[Column] public string Tag { get; set; }





		[Column] public string SiteId { get; set; }



	}


}



